// Generated by CoffeeScript 1.4.0
(function() {
  var ImageHeaders, MAX_SIZE, exif;

  MAX_SIZE = 131072;

  exif = require('exif');

  ImageHeaders = (function() {

    ImageHeaders.modes = {
      jpeg: "jpeg",
      gif: "gif",
      tiff: "tiff",
      png: "png"
    };

    ImageHeaders.orientations = {
      landscape: "landscape",
      portrait: "portrait"
    };

    function ImageHeaders() {
      this.finished = false;
      this.buffer = new Buffer(MAX_SIZE);
      this.exif_buffer = null;
      this.exif_offset = 0;
      this.exif_bytes = 0;
      this.mode = null;
      this.buffer_index = 0;
      this.stream_index = 0;
      this.jpeg = {
        marker: 0,
        marker_offset: 0,
        marker_size: 0
      };
      this.png = {
        start: 0,
        length: 0
      };
      this.height = null;
      this.width = null;
      this.exif_orientation = null;
      this.final_orientation = null;
    }

    ImageHeaders.prototype.add_bytes = function(bytes) {
      var b, _i, _len, _results;
      if (this.finished === true) {
        return;
      }
      if (this.buffer_index >= MAX_SIZE) {
        this.finished = true;
        return;
      }
      if (typeof bytes === "number") {
        bytes = [bytes];
      }
      _results = [];
      for (_i = 0, _len = bytes.length; _i < _len; _i++) {
        b = bytes[_i];
        if (this.exif_bytes === 0) {
          this.buffer[this.buffer_index] = b;
          this.route_byte(b);
          this.buffer_index++;
        } else {
          this.exif_buffer.writeUInt8(b, this.exif_offset);
          this.exif_offset++;
          this.exif_bytes--;
        }
        _results.push(this.stream_index++);
      }
      return _results;
    };

    ImageHeaders.prototype.finish = function(callback) {
      var local_this;
      local_this = this;
      if (this.mode === ImageHeaders.modes.jpeg) {
        if ((this.exif_buffer != null) && this.exif_buffer.toString("utf-8", 0, 4) === "Exif") {
          return new exif.ExifImage({
            exif_buffer: this.exif_buffer
          }, function(err, exif_data) {
            var orientation_tag, temp_w;
            if ((exif_data != null) && (exif_data.image != null)) {
              orientation_tag = exif_data.image.filter(function(tag) {
                return tag.tagName === "Orientation";
              });
              if (orientation_tag.length === 1) {
                local_this.orientation = orientation_tag[0].value;
                if (local_this.orientation === 6 || local_this.orientation === 8) {
                  temp_w = local_this.width;
                  local_this.width = local_this.height;
                  local_this.height = temp_w;
                }
              }
              local_this.exif_data = exif_data;
            }
            return callback(err, local_this);
          });
        } else {
          return callback(null, local_this);
        }
      } else {
        return callback(null, local_this);
      }
    };

    ImageHeaders.prototype.route_byte = function(b) {
      switch (this.mode) {
        case ImageHeaders.modes.jpeg:
          return this.check_jpeg_state(b, this.buffer_index);
        case ImageHeaders.modes.gif:
          return this.check_gif_state(b, this.buffer_index);
        case ImageHeaders.modes.tiff:
          return this.check_tiff_state(b, this.buffer_index);
        case ImageHeaders.modes.png:
          return this.check_png_state(b, this.buffer_index);
        default:
          return this.identify_format(b);
      }
    };

    ImageHeaders.prototype.check_jpeg_state = function(b, i) {
      var length, position;
      if (this.jpeg.marker === 0 && b === 255) {
        this.jpeg.marker = b;
        return;
      } else if (this.jpeg.marker === 255) {
        switch (b) {
          case 0x00:
          case 0x01:
          case 0xD0:
          case 0xD1:
          case 0xD2:
          case 0xD3:
          case 0xD4:
          case 0xD5:
          case 0xD6:
          case 0xD7:
          case 0xD8:
          case 0xD9:
          case 0xFF:
            this.clear_jpeg_marker();
            return;
          default:
            this.jpeg.marker = b;
            this.jpeg.marker_offset = i;
            this.jpeg.marker_size = 0;
        }
      }
      if (this.jpeg.marker === 0xDA && this.jpeg.marker_offset - i === 0) {
        this.finished = true;
        return;
      }
      position = i - this.jpeg.marker_offset;
      if (position === 2) {
        if (!(this.buffer.length > this.jpeg.marker_offset + 2)) {
          this.finished = true;
          this.clear_jpeg_marker();
          console.log("Aborting parse at " + this.jpeg.marker_offset + " " + this.jpeg.marker + " " + this.buffer.length);
          return;
        }
        length = this.buffer.readUInt16BE(this.jpeg.marker_offset + 1);
        this.jpeg.marker_size = length;
        switch (this.jpeg.marker) {
          case 0xE1:
            if (!(this.exif_buffer != null)) {
              this.exif_bytes = this.jpeg.marker_size - 2;
              this.exif_buffer = new Buffer(this.exif_bytes);
              return this.clear_jpeg_marker();
            }
        }
      } else {
        if (this.jpeg.marker_size > 0 && position === this.jpeg.marker_size) {
          switch (this.jpeg.marker) {
            case 0xC0:
            case 0xC1:
            case 0xC2:
            case 0xC3:
            case 0xC5:
            case 0xC6:
            case 0xC7:
            case 0xC9:
            case 0xCA:
            case 0xCB:
            case 0xCD:
            case 0xCE:
            case 0xCF:
              this.parse_jpeg_sofn();
          }
          return this.clear_jpeg_marker();
        }
      }
    };

    ImageHeaders.prototype.check_gif_state = function(b, i) {
      if (i === 10) {
        this.width = this.buffer.readUInt16LE(6);
        this.height = this.buffer.readUInt16LE(8);
        return this.finished = true;
      }
    };

    ImageHeaders.prototype.check_png_state = function(b, i) {
      var length, offset;
      if (i < 8) {
        return;
      }
      if (this.png.start === 0) {
        this.png.start = i;
        return 0;
      }
      offset = i - this.png.start;
      switch (offset) {
        case 3:
          length = this.buffer.readUInt32BE(this.png.start);
          return this.png.length = length;
        case 7:
          return this.png.marker = this.buffer.toString("utf8", this.png.start + 4, this.png.start + 8);
        case this.png.length + 8:
          if (this.png.marker === "IHDR") {
            this.width = this.buffer.readUInt32BE(this.png.start + 8);
            this.height = this.buffer.readUInt32BE(this.png.start + 12);
            return this.finished = true;
          }
          break;
        case this.png.length + 12:
          return this.clear_png_marker();
      }
    };

    ImageHeaders.prototype.check_tiff_state = function(b, i) {
      this.height = 0;
      this.width = 0;
      return this.finished = true;
    };

    ImageHeaders.prototype.identify_format = function(b) {
      var buf_as_string, i, _i, _ref, _results;
      if (this.stream_index === 1) {
        if (this.buffer[0] === 0xFF && this.buffer[1] === 0xD8) {
          this.mode = ImageHeaders.modes.jpeg;
        }
      } else if (this.stream_index === 2) {
        buf_as_string = this.buffer.toString("utf8", 0, 3);
        if (buf_as_string === "GIF") {
          this.mode = ImageHeaders.modes.gif;
        } else if (buf_as_string === "II*" || buf_as_string === "MM*") {
          this.mode = ImageHeaders.modes.tiff;
        }
      } else if (this.stream_index === 7) {
        if (this.buffer.toString("hex", 0, 8) === "89504e470d0a1a0a") {
          this.mode = ImageHeaders.modes.png;
        }
      }
      if (this.stream_index > 10) {
        this.finished = true;
        return;
      }
      if ((this.mode != null)) {
        _results = [];
        for (i = _i = 0, _ref = this.stream_index; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(this.route_byte(this.buffer[i], i));
        }
        return _results;
      }
    };

    ImageHeaders.prototype.clear_jpeg_marker = function() {
      this.jpeg.marker = 0;
      this.jpeg.marker_offset = 0;
      return this.jpeg.marker_size = 0;
    };

    ImageHeaders.prototype.parse_jpeg_sofn = function() {
      this.height = this.buffer.readUInt16BE(this.jpeg.marker_offset + 4);
      return this.width = this.buffer.readUInt16BE(this.jpeg.marker_offset + 6);
    };

    ImageHeaders.prototype.clear_png_marker = function() {
      this.png.start = 0;
      this.png.length = 0;
      return this.png.marker = null;
    };

    return ImageHeaders;

  })();

  module.exports = ImageHeaders;

}).call(this);
